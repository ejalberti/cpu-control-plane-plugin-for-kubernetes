// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: pkg/ctlplaneapi/controlplane.proto

package ctlplaneapi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AllocationState int32

const (
	AllocationState_CREATED AllocationState = 0
	AllocationState_UPDATED AllocationState = 1
	AllocationState_DELETED AllocationState = 2
)

// Enum value maps for AllocationState.
var (
	AllocationState_name = map[int32]string{
		0: "CREATED",
		1: "UPDATED",
		2: "DELETED",
	}
	AllocationState_value = map[string]int32{
		"CREATED": 0,
		"UPDATED": 1,
		"DELETED": 2,
	}
)

func (x AllocationState) Enum() *AllocationState {
	p := new(AllocationState)
	*p = x
	return p
}

func (x AllocationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllocationState) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_ctlplaneapi_controlplane_proto_enumTypes[0].Descriptor()
}

func (AllocationState) Type() protoreflect.EnumType {
	return &file_pkg_ctlplaneapi_controlplane_proto_enumTypes[0]
}

func (x AllocationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllocationState.Descriptor instead.
func (AllocationState) EnumDescriptor() ([]byte, []int) {
	return file_pkg_ctlplaneapi_controlplane_proto_rawDescGZIP(), []int{0}
}

type Placement int32

const (
	Placement_DEFAULT Placement = 0
	Placement_COMPACT Placement = 1
	Placement_SCATTER Placement = 2
	Placement_POOL    Placement = 3
)

// Enum value maps for Placement.
var (
	Placement_name = map[int32]string{
		0: "DEFAULT",
		1: "COMPACT",
		2: "SCATTER",
		3: "POOL",
	}
	Placement_value = map[string]int32{
		"DEFAULT": 0,
		"COMPACT": 1,
		"SCATTER": 2,
		"POOL":    3,
	}
)

func (x Placement) Enum() *Placement {
	p := new(Placement)
	*p = x
	return p
}

func (x Placement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Placement) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_ctlplaneapi_controlplane_proto_enumTypes[1].Descriptor()
}

func (Placement) Type() protoreflect.EnumType {
	return &file_pkg_ctlplaneapi_controlplane_proto_enumTypes[1]
}

func (x Placement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Placement.Descriptor instead.
func (Placement) EnumDescriptor() ([]byte, []int) {
	return file_pkg_ctlplaneapi_controlplane_proto_rawDescGZIP(), []int{1}
}

type CreatePodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodId        string           `protobuf:"bytes,1,opt,name=podId,proto3" json:"podId,omitempty"`
	PodName      string           `protobuf:"bytes,2,opt,name=podName,proto3" json:"podName,omitempty"`
	PodNamespace string           `protobuf:"bytes,3,opt,name=podNamespace,proto3" json:"podNamespace,omitempty"`
	Resources    *ResourceInfo    `protobuf:"bytes,4,opt,name=resources,proto3" json:"resources,omitempty"`
	Containers   []*ContainerInfo `protobuf:"bytes,5,rep,name=containers,proto3" json:"containers,omitempty"`
}

func (x *CreatePodRequest) Reset() {
	*x = CreatePodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_ctlplaneapi_controlplane_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePodRequest) ProtoMessage() {}

func (x *CreatePodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_ctlplaneapi_controlplane_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePodRequest.ProtoReflect.Descriptor instead.
func (*CreatePodRequest) Descriptor() ([]byte, []int) {
	return file_pkg_ctlplaneapi_controlplane_proto_rawDescGZIP(), []int{0}
}

func (x *CreatePodRequest) GetPodId() string {
	if x != nil {
		return x.PodId
	}
	return ""
}

func (x *CreatePodRequest) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *CreatePodRequest) GetPodNamespace() string {
	if x != nil {
		return x.PodNamespace
	}
	return ""
}

func (x *CreatePodRequest) GetResources() *ResourceInfo {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *CreatePodRequest) GetContainers() []*ContainerInfo {
	if x != nil {
		return x.Containers
	}
	return nil
}

type UpdatePodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodId      string           `protobuf:"bytes,1,opt,name=podId,proto3" json:"podId,omitempty"`
	Resources  *ResourceInfo    `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	Containers []*ContainerInfo `protobuf:"bytes,3,rep,name=containers,proto3" json:"containers,omitempty"`
}

func (x *UpdatePodRequest) Reset() {
	*x = UpdatePodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_ctlplaneapi_controlplane_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePodRequest) ProtoMessage() {}

func (x *UpdatePodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_ctlplaneapi_controlplane_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePodRequest.ProtoReflect.Descriptor instead.
func (*UpdatePodRequest) Descriptor() ([]byte, []int) {
	return file_pkg_ctlplaneapi_controlplane_proto_rawDescGZIP(), []int{1}
}

func (x *UpdatePodRequest) GetPodId() string {
	if x != nil {
		return x.PodId
	}
	return ""
}

func (x *UpdatePodRequest) GetResources() *ResourceInfo {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *UpdatePodRequest) GetContainers() []*ContainerInfo {
	if x != nil {
		return x.Containers
	}
	return nil
}

type DeletePodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodId string `protobuf:"bytes,1,opt,name=podId,proto3" json:"podId,omitempty"`
}

func (x *DeletePodRequest) Reset() {
	*x = DeletePodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_ctlplaneapi_controlplane_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePodRequest) ProtoMessage() {}

func (x *DeletePodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_ctlplaneapi_controlplane_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePodRequest.ProtoReflect.Descriptor instead.
func (*DeletePodRequest) Descriptor() ([]byte, []int) {
	return file_pkg_ctlplaneapi_controlplane_proto_rawDescGZIP(), []int{2}
}

func (x *DeletePodRequest) GetPodId() string {
	if x != nil {
		return x.PodId
	}
	return ""
}

type ResourceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestedCpus   int32     `protobuf:"varint,1,opt,name=requestedCpus,proto3" json:"requestedCpus,omitempty"`
	LimitCpus       int32     `protobuf:"varint,2,opt,name=limitCpus,proto3" json:"limitCpus,omitempty"`
	RequestedMemory int32     `protobuf:"varint,3,opt,name=requestedMemory,proto3" json:"requestedMemory,omitempty"`
	LimitMemory     int32     `protobuf:"varint,4,opt,name=limitMemory,proto3" json:"limitMemory,omitempty"`
	CpuAffinity     Placement `protobuf:"varint,5,opt,name=cpuAffinity,proto3,enum=ctlplaneapi.Placement" json:"cpuAffinity,omitempty"`
}

func (x *ResourceInfo) Reset() {
	*x = ResourceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_ctlplaneapi_controlplane_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceInfo) ProtoMessage() {}

func (x *ResourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_ctlplaneapi_controlplane_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceInfo.ProtoReflect.Descriptor instead.
func (*ResourceInfo) Descriptor() ([]byte, []int) {
	return file_pkg_ctlplaneapi_controlplane_proto_rawDescGZIP(), []int{3}
}

func (x *ResourceInfo) GetRequestedCpus() int32 {
	if x != nil {
		return x.RequestedCpus
	}
	return 0
}

func (x *ResourceInfo) GetLimitCpus() int32 {
	if x != nil {
		return x.LimitCpus
	}
	return 0
}

func (x *ResourceInfo) GetRequestedMemory() int32 {
	if x != nil {
		return x.RequestedMemory
	}
	return 0
}

func (x *ResourceInfo) GetLimitMemory() int32 {
	if x != nil {
		return x.LimitMemory
	}
	return 0
}

func (x *ResourceInfo) GetCpuAffinity() Placement {
	if x != nil {
		return x.CpuAffinity
	}
	return Placement_DEFAULT
}

type ContainerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerId   string        `protobuf:"bytes,1,opt,name=containerId,proto3" json:"containerId,omitempty"`
	ContainerName string        `protobuf:"bytes,2,opt,name=containerName,proto3" json:"containerName,omitempty"`
	Resources     *ResourceInfo `protobuf:"bytes,3,opt,name=resources,proto3" json:"resources,omitempty"`
}

func (x *ContainerInfo) Reset() {
	*x = ContainerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_ctlplaneapi_controlplane_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerInfo) ProtoMessage() {}

func (x *ContainerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_ctlplaneapi_controlplane_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerInfo.ProtoReflect.Descriptor instead.
func (*ContainerInfo) Descriptor() ([]byte, []int) {
	return file_pkg_ctlplaneapi_controlplane_proto_rawDescGZIP(), []int{4}
}

func (x *ContainerInfo) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *ContainerInfo) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *ContainerInfo) GetResources() *ResourceInfo {
	if x != nil {
		return x.Resources
	}
	return nil
}

type ContainerAllocationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerId string          `protobuf:"bytes,1,opt,name=containerId,proto3" json:"containerId,omitempty"`
	AllocState  AllocationState `protobuf:"varint,2,opt,name=allocState,proto3,enum=ctlplaneapi.AllocationState" json:"allocState,omitempty"`
	CpuSet      []*CPUSet       `protobuf:"bytes,3,rep,name=cpuSet,proto3" json:"cpuSet,omitempty"`
}

func (x *ContainerAllocationInfo) Reset() {
	*x = ContainerAllocationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_ctlplaneapi_controlplane_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerAllocationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerAllocationInfo) ProtoMessage() {}

func (x *ContainerAllocationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_ctlplaneapi_controlplane_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerAllocationInfo.ProtoReflect.Descriptor instead.
func (*ContainerAllocationInfo) Descriptor() ([]byte, []int) {
	return file_pkg_ctlplaneapi_controlplane_proto_rawDescGZIP(), []int{5}
}

func (x *ContainerAllocationInfo) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *ContainerAllocationInfo) GetAllocState() AllocationState {
	if x != nil {
		return x.AllocState
	}
	return AllocationState_CREATED
}

func (x *ContainerAllocationInfo) GetCpuSet() []*CPUSet {
	if x != nil {
		return x.CpuSet
	}
	return nil
}

type CPUSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartCPU int32 `protobuf:"varint,1,opt,name=startCPU,proto3" json:"startCPU,omitempty"`
	EndCPU   int32 `protobuf:"varint,2,opt,name=endCPU,proto3" json:"endCPU,omitempty"`
}

func (x *CPUSet) Reset() {
	*x = CPUSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_ctlplaneapi_controlplane_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPUSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUSet) ProtoMessage() {}

func (x *CPUSet) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_ctlplaneapi_controlplane_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUSet.ProtoReflect.Descriptor instead.
func (*CPUSet) Descriptor() ([]byte, []int) {
	return file_pkg_ctlplaneapi_controlplane_proto_rawDescGZIP(), []int{6}
}

func (x *CPUSet) GetStartCPU() int32 {
	if x != nil {
		return x.StartCPU
	}
	return 0
}

func (x *CPUSet) GetEndCPU() int32 {
	if x != nil {
		return x.EndCPU
	}
	return 0
}

type PodAllocationReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodId                 string                     `protobuf:"bytes,1,opt,name=podId,proto3" json:"podId,omitempty"`
	AllocState            AllocationState            `protobuf:"varint,2,opt,name=allocState,proto3,enum=ctlplaneapi.AllocationState" json:"allocState,omitempty"`
	CpuSet                []*CPUSet                  `protobuf:"bytes,3,rep,name=cpuSet,proto3" json:"cpuSet,omitempty"`
	ContainersAllocations []*ContainerAllocationInfo `protobuf:"bytes,4,rep,name=containersAllocations,proto3" json:"containersAllocations,omitempty"`
}

func (x *PodAllocationReply) Reset() {
	*x = PodAllocationReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_ctlplaneapi_controlplane_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodAllocationReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodAllocationReply) ProtoMessage() {}

func (x *PodAllocationReply) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_ctlplaneapi_controlplane_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodAllocationReply.ProtoReflect.Descriptor instead.
func (*PodAllocationReply) Descriptor() ([]byte, []int) {
	return file_pkg_ctlplaneapi_controlplane_proto_rawDescGZIP(), []int{7}
}

func (x *PodAllocationReply) GetPodId() string {
	if x != nil {
		return x.PodId
	}
	return ""
}

func (x *PodAllocationReply) GetAllocState() AllocationState {
	if x != nil {
		return x.AllocState
	}
	return AllocationState_CREATED
}

func (x *PodAllocationReply) GetCpuSet() []*CPUSet {
	if x != nil {
		return x.CpuSet
	}
	return nil
}

func (x *PodAllocationReply) GetContainersAllocations() []*ContainerAllocationInfo {
	if x != nil {
		return x.ContainersAllocations
	}
	return nil
}

var File_pkg_ctlplaneapi_controlplane_proto protoreflect.FileDescriptor

var file_pkg_ctlplaneapi_controlplane_proto_rawDesc = []byte{
	0x0a, 0x22, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x74, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x63, 0x74, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x61, 0x70,
	0x69, 0x22, 0xdb, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x74, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x74, 0x6c, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x22,
	0x9d, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x74, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x74, 0x6c, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x22,
	0x28, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x64, 0x22, 0xd8, 0x01, 0x0a, 0x0c, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x70, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x70, 0x75, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x70, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x70, 0x75, 0x73, 0x12, 0x28,
	0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x70,
	0x75, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x63, 0x74, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x63, 0x70, 0x75, 0x41, 0x66, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x79, 0x22, 0x90, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x74, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x74, 0x6c, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x70, 0x75, 0x53, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x74, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x50, 0x55, 0x53, 0x65, 0x74, 0x52, 0x06, 0x63, 0x70, 0x75, 0x53, 0x65, 0x74,
	0x22, 0x3c, 0x0a, 0x06, 0x43, 0x50, 0x55, 0x53, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x43, 0x50, 0x55, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x43, 0x50, 0x55, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x43, 0x50, 0x55,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x43, 0x50, 0x55, 0x22, 0xf1,
	0x01, 0x0a, 0x12, 0x50, 0x6f, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x63, 0x74, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x70, 0x75,
	0x53, 0x65, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x74, 0x6c, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x50, 0x55, 0x53, 0x65, 0x74, 0x52, 0x06,
	0x63, 0x70, 0x75, 0x53, 0x65, 0x74, 0x12, 0x5a, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x74, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x15, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2a, 0x38, 0x0a, 0x0f, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x3c, 0x0a, 0x09,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x43,
	0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x43, 0x41, 0x54, 0x54, 0x45, 0x52, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f, 0x4f, 0x4c, 0x10, 0x03, 0x32, 0xfb, 0x01, 0x0a, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x12, 0x4d, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x64, 0x12, 0x1d, 0x2e, 0x63, 0x74, 0x6c, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x74, 0x6c, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x64, 0x12, 0x1d, 0x2e, 0x63, 0x74, 0x6c, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x74, 0x6c, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x09, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x6f, 0x64, 0x12, 0x1d, 0x2e, 0x63, 0x74, 0x6c, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x74, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x63, 0x74,
	0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_pkg_ctlplaneapi_controlplane_proto_rawDescOnce sync.Once
	file_pkg_ctlplaneapi_controlplane_proto_rawDescData = file_pkg_ctlplaneapi_controlplane_proto_rawDesc
)

func file_pkg_ctlplaneapi_controlplane_proto_rawDescGZIP() []byte {
	file_pkg_ctlplaneapi_controlplane_proto_rawDescOnce.Do(func() {
		file_pkg_ctlplaneapi_controlplane_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_ctlplaneapi_controlplane_proto_rawDescData)
	})
	return file_pkg_ctlplaneapi_controlplane_proto_rawDescData
}

var file_pkg_ctlplaneapi_controlplane_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_pkg_ctlplaneapi_controlplane_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_pkg_ctlplaneapi_controlplane_proto_goTypes = []interface{}{
	(AllocationState)(0),            // 0: ctlplaneapi.AllocationState
	(Placement)(0),                  // 1: ctlplaneapi.Placement
	(*CreatePodRequest)(nil),        // 2: ctlplaneapi.CreatePodRequest
	(*UpdatePodRequest)(nil),        // 3: ctlplaneapi.UpdatePodRequest
	(*DeletePodRequest)(nil),        // 4: ctlplaneapi.DeletePodRequest
	(*ResourceInfo)(nil),            // 5: ctlplaneapi.ResourceInfo
	(*ContainerInfo)(nil),           // 6: ctlplaneapi.ContainerInfo
	(*ContainerAllocationInfo)(nil), // 7: ctlplaneapi.ContainerAllocationInfo
	(*CPUSet)(nil),                  // 8: ctlplaneapi.CPUSet
	(*PodAllocationReply)(nil),      // 9: ctlplaneapi.PodAllocationReply
}
var file_pkg_ctlplaneapi_controlplane_proto_depIdxs = []int32{
	5,  // 0: ctlplaneapi.CreatePodRequest.resources:type_name -> ctlplaneapi.ResourceInfo
	6,  // 1: ctlplaneapi.CreatePodRequest.containers:type_name -> ctlplaneapi.ContainerInfo
	5,  // 2: ctlplaneapi.UpdatePodRequest.resources:type_name -> ctlplaneapi.ResourceInfo
	6,  // 3: ctlplaneapi.UpdatePodRequest.containers:type_name -> ctlplaneapi.ContainerInfo
	1,  // 4: ctlplaneapi.ResourceInfo.cpuAffinity:type_name -> ctlplaneapi.Placement
	5,  // 5: ctlplaneapi.ContainerInfo.resources:type_name -> ctlplaneapi.ResourceInfo
	0,  // 6: ctlplaneapi.ContainerAllocationInfo.allocState:type_name -> ctlplaneapi.AllocationState
	8,  // 7: ctlplaneapi.ContainerAllocationInfo.cpuSet:type_name -> ctlplaneapi.CPUSet
	0,  // 8: ctlplaneapi.PodAllocationReply.allocState:type_name -> ctlplaneapi.AllocationState
	8,  // 9: ctlplaneapi.PodAllocationReply.cpuSet:type_name -> ctlplaneapi.CPUSet
	7,  // 10: ctlplaneapi.PodAllocationReply.containersAllocations:type_name -> ctlplaneapi.ContainerAllocationInfo
	2,  // 11: ctlplaneapi.ControlPlane.CreatePod:input_type -> ctlplaneapi.CreatePodRequest
	3,  // 12: ctlplaneapi.ControlPlane.UpdatePod:input_type -> ctlplaneapi.UpdatePodRequest
	4,  // 13: ctlplaneapi.ControlPlane.DeletePod:input_type -> ctlplaneapi.DeletePodRequest
	9,  // 14: ctlplaneapi.ControlPlane.CreatePod:output_type -> ctlplaneapi.PodAllocationReply
	9,  // 15: ctlplaneapi.ControlPlane.UpdatePod:output_type -> ctlplaneapi.PodAllocationReply
	9,  // 16: ctlplaneapi.ControlPlane.DeletePod:output_type -> ctlplaneapi.PodAllocationReply
	14, // [14:17] is the sub-list for method output_type
	11, // [11:14] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_pkg_ctlplaneapi_controlplane_proto_init() }
func file_pkg_ctlplaneapi_controlplane_proto_init() {
	if File_pkg_ctlplaneapi_controlplane_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_ctlplaneapi_controlplane_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_ctlplaneapi_controlplane_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_ctlplaneapi_controlplane_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_ctlplaneapi_controlplane_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_ctlplaneapi_controlplane_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_ctlplaneapi_controlplane_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerAllocationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_ctlplaneapi_controlplane_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPUSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_ctlplaneapi_controlplane_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodAllocationReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_ctlplaneapi_controlplane_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_ctlplaneapi_controlplane_proto_goTypes,
		DependencyIndexes: file_pkg_ctlplaneapi_controlplane_proto_depIdxs,
		EnumInfos:         file_pkg_ctlplaneapi_controlplane_proto_enumTypes,
		MessageInfos:      file_pkg_ctlplaneapi_controlplane_proto_msgTypes,
	}.Build()
	File_pkg_ctlplaneapi_controlplane_proto = out.File
	file_pkg_ctlplaneapi_controlplane_proto_rawDesc = nil
	file_pkg_ctlplaneapi_controlplane_proto_goTypes = nil
	file_pkg_ctlplaneapi_controlplane_proto_depIdxs = nil
}
