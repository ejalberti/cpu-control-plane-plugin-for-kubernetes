syntax = "proto3";
package ctlplaneapi;
option go_package = "./ctlplaneapi";


// Control Plane Interface to allocate pods and containers  
service ControlPlane {
    // Request allocation of a pod on creation event 
    rpc CreatePod(CreatePodRequest) returns (PodAllocationReply) {}
    // Updates pod allocation; also used for container deletion
    rpc UpdatePod(UpdatePodRequest) returns (PodAllocationReply) {}
    // Deallocates a pod
    rpc DeletePod(DeletePodRequest) returns (PodAllocationReply) {}
}

message CreatePodRequest {
    string podId = 1;
    string podName = 2;
    string podNamespace = 3;
    ResourceInfo resources = 4;
    repeated ContainerInfo containers = 5;
}

message UpdatePodRequest {
    string podId = 1;
    ResourceInfo resources = 2;
    repeated ContainerInfo containers = 3;
}

message DeletePodRequest {
    string podId = 1;
}

enum AllocationState{
    CREATED = 0;
    UPDATED = 1;
    DELETED = 2;
}

enum Placement {
    DEFAULT = 0;
    COMPACT = 1;
    SCATTER = 2;
    POOL = 3;
}

message ResourceInfo{
    int32 requestedCpus = 1;
    int32 limitCpus = 2;
    bytes requestedMemory = 3;
    bytes limitMemory = 4;
    Placement cpuAffinity = 5;
}

message ContainerInfo {
    string containerId = 1;
    string containerName = 2;
    ResourceInfo resources = 3;
}

message ContainerAllocationInfo{
    string containerId = 1;
    AllocationState allocState = 2;
    repeated CPUSet cpuSet = 3;
}

message CPUSet {
    int32 startCPU = 1;
    int32 endCPU = 2;
}

message PodAllocationReply{
    string podId = 1;
    AllocationState allocState = 2;
    repeated CPUSet cpuSet = 3;
    repeated ContainerAllocationInfo containersAllocations = 4;
}
